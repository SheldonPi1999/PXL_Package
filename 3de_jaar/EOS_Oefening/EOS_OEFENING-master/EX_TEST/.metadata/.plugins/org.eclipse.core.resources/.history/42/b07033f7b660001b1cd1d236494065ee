#include "FreeRTOS.h"
#include "task.h"
#include "timers.h"
#include "queue.h"

#include "xil_printf.h"
#include "xparameters.h"

#include "xgpiops.h"
#include "xil_printf.h"

#include "header.h"

#define BUTTON_PIN 0

#define DELAY_1_SECOND		1000UL
#define mainONE_SHOT_TIMER_PERIOD		( pdMS_TO_TICKS( 20000UL ) )

/* FUNCTIONS */
static void prvOneShotTimerCallback( TimerHandle_t xTimer );

void vTask1( void *pvParameters );
void vTask2( void *pvParameters );

static QueueHandle_t xQueue = NULL;

XGpioPs GpioPs;

int BTNCounter = 0;

int main( void )
{
	int GpioPsStatus;

	TimerHandle_t xOneShotTimer;
	BaseType_t xTimer1Started;
	XGpioPs_Config *GPIOConfigPtr;

	// 1 = Size, 2 = Size of element
	xQueue = xQueueCreate(1, 4);

	xOneShotTimer = xTimerCreate( "OneShot",
									  mainONE_SHOT_TIMER_PERIOD,
									  pdFALSE,
									  0,
									  prvOneShotTimerCallback );


	xTaskCreate(vTask1,"Task1",1000,NULL,1,NULL);
	xTaskCreate(vTask2,"Task2",1000,NULL,1,NULL);

	GPIOConfigPtr = XGpioPs_LookupConfig(XPAR_PS7_GPIO_0_DEVICE_ID);
	GpioPsStatus = XGpioPs_CfgInitialize(&GpioPs, GPIOConfigPtr,GPIOConfigPtr->BaseAddr);

	// Set Input pin
	XGpioPs_SetDirectionPin(&GpioPs, BUTTON_PIN, 0);

	if( xOneShotTimer != NULL )
	{
		xTimer1Started = xTimerStart( xOneShotTimer, 0 );

		if( xTimer1Started == pdPASS && GpioPsStatus == XST_SUCCESS )
		{
			vTaskStartScheduler();
		}

		else
		{
			print("Status error \n\r");
			return 0;
		}
	}



	for( ;; );
	return 0;
}

static void prvOneShotTimerCallback( TimerHandle_t xTimer )
{
	xil_printf( "Kasper Toetenel\r\n" );
}

void vTask1(void *pvParameters)
{
	const TickType_t x1second = pdMS_TO_TICKS( DELAY_1_SECOND );
	u32 Data;

	for( ;; )
	{
		vTaskDelay( x1second );

		Data = XGpioPs_ReadPin(&GpioPs, BUTTON_PIN);
		if(Data != 0)
		{
			BTNCounter++;
			xQueueSend( xQueue,			/* The queue being written to. */
						&BTNCounter, 	/* The address of the data being sent. */
						0UL );			/* The block time. */
		}
	}
}

void vTask2(void *pvParameters)
{
	u32 ReceivedData = 0;
	u32 CalculatedData = 0;
	BaseType_t xStatus;

	for( ;; )
	{
		xStatus = xQueueReceive(xQueue, &ReceivedData, 0);

		if(xStatus == pdPASS)
		{
			xil_printf( "computed value %u: %u\r\n", ReceivedData, CalculatedData);
			SQR_mWriteReg(XPAR_SQR_0_S00_AXI_BASEADDR, REG0_OFFSET, ReceivedData)
		}
	}
}
