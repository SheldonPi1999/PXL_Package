#include "FreeRTOS.h"
#include "task.h"

#include "xil_printf.h"
#include "xparameters.h"

#include "queue.h"
#include "xgpiops.h"
XGpioPs Gpio;

u32 Input_Pin = 0; /* Switch button */

static QueueHandle_t xQueue = NULL;

#define mainDELAY_LOOP_COUNT		( 0xffffff )

void vTask1( void *pvParameters );
void vTask2( void *pvParameters );
void vTask3( void *pvParameters );

#define vPrintString xil_printf

int main(void)
{
	xTaskCreate(vTask1,"Task1",1000,NULL,1,NULL);
	xTaskCreate(vTask2,"Task2",1000,NULL,1,NULL);
	xTaskCreate(vTask3,"Task3",1000,NULL,1,NULL);

	vTaskStartScheduler();

	for(;;);

	return 0;
}

void vTask1(void *pvParameters)
{
	const char *pcTaskName = "Task 1 is running\r\n";
	const TickType_t xDelay250ms = pdMS_TO_TICKS(250);
	volatile uint32_t ul;

	for(;;)
	{
		vPrintString(pcTaskName);
		for(ul=0;ul< mainDELAY_LOOP_COUNT;ul++)
		{

		}
		vTaskDelay(xDelay250ms);
	}
}

void vTask2(void *pvParameters)
{
	const char *pcTaskName = "Task 2 is running\r\n";
	const TickType_t xDelay250ms = pdMS_TO_TICKS(250);
	volatile uint32_t ul;

	for(;;)
	{
		vPrintString(pcTaskName);
		for(ul=0;ul< mainDELAY_LOOP_COUNT;ul++)
		{

		}
		vTaskDelay(xDelay250ms);
	}
}

void vTask3(void *pvParameters)
{
	const char *pcTaskName = "Task 3 is running\r\n";
	const TickType_t xDelay250ms = pdMS_TO_TICKS(250);
	volatile uint32_t ul;

	u32 Data;
	int zeronul = 0;

	for(;;)
	{
		vPrintString(pcTaskName);
		Data = XGpioPs_ReadPin(&Gpio, Input_Pin);
		for(ul=0;ul< mainDELAY_LOOP_COUNT;ul++)
		{
			if(Data == 1)
			{
				xQueueSend( xQueue,			/* The queue being written to. */
							&zeronul, 	    /* The address of the data being sent. */
							0UL );			/* The block time. */
			}

			else
			{
				xil_printf("No data from task 3 send to queue");
			}
		}
		vTaskDelay(xDelay250ms);
	}
}
